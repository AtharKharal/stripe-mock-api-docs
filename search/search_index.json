{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Stripe Mock API Documentation","text":"<p>Welcome to the Stripe Mock API Documentation \u2014 your authoritative guide to a simulated payment platform designed to emulate Stripe\u2019s core features. This documentation enables developers, QA professionals, and technical writers to explore, prototype, and demonstrate API-first workflows in a controlled, job-ready environment.</p> <p>Purpose This documentation serves as a developer-grade portfolio artifact, demonstrating mastery in Markdown, MkDocs Material, RESTful API documentation, and DocOps practices.</p>"},{"location":"#overview","title":"\ud83d\udcda Overview","text":"<p>This mock platform replicates a full-featured payment service with the following capabilities:</p> <ul> <li>\ud83d\udd10 Secure token-based authentication with scoped API keys.</li> <li>\ud83d\udcb3 End-to-end payment flows including charges, refunds, and customers.</li> <li>\ud83d\udcd8 Complete OpenAPI-based reference for automated client generation.</li> <li>\ud83e\uddea Webhook event simulation with realistic test payloads.</li> <li>\u2699\ufe0f Modular documentation with guides, changelogs, error handling, and testing strategy.</li> </ul>"},{"location":"#target-audience","title":"\ud83e\uddd1\u200d\ud83d\udcbb Target Audience","text":"<p>This documentation is written for a technical audience actively working in or transitioning to API-based system design:</p> <ul> <li>Developers building or integrating with payment APIs.</li> <li>QA engineers who require a mock server with configurable responses and events.</li> <li>Technical writers showcasing structured, interlinked, and executable documentation artifacts using open standards.</li> </ul>"},{"location":"#key-features","title":"\ud83d\udd27 Key Features","text":"Feature Description Token Authentication API access requires an API key via Bearer token in the <code>Authorization</code> header. See Authentication \u2192 Charges API Create and manage payments programmatically. Guide \u2192 Event Webhooks Register URLs to receive real-time payment updates. See Webhooks \u2192 Error Catalog Standardized error codes with suggested remediation. Reference \u2192 OpenAPI Spec Browse and download the full machine-readable API spec. Spec \u2192"},{"location":"#repository","title":"\ud83d\udce6 Repository","text":"<p>Access the full source code and MkDocs site configuration on GitHub:</p> <p>\ud83d\udd17 GitHub Repository</p> <p>This repository includes:</p> <ul> <li>All <code>.md</code> content files under <code>docs/</code></li> <li><code>mkdocs.yml</code> with full Material theme configuration</li> <li>GitHub Pages deployment setup</li> <li>Custom styles and assets</li> <li>Sample OpenAPI YAML</li> </ul>"},{"location":"#navigation-guide","title":"\ud83e\udded Navigation Guide","text":"<pre><code>stripe-mock-api-docs/\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 guides/\n\u2502   \u2502   \u2514\u2500\u2500 creating-a-charge.md\n\u2502   \u251c\u2500\u2500 reference/\n\u2502   \u2502   \u251c\u2500\u2500 authentication.md\n\u2502   \u2502   \u2514\u2500\u2500 errors.md\n\u2502   \u2514\u2500\u2500 webhooks/\n\u2502       \u2514\u2500\u2500 handling-events.md\n\u251c\u2500\u2500 mkdocs.yml\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"guides/creating-a-charge/","title":"Creating a Charge","text":"<p>Creating a charge is the core operation of any payment system. This guide explains how to initiate a payment using the Stripe Mock API by issuing a POST request to the <code>/v1/charges</code> endpoint.</p>"},{"location":"guides/creating-a-charge/#authentication","title":"\ud83d\udd10 Authentication","text":"<p>All charge creation requests require a valid API key passed via the <code>Authorization</code> header:</p> <pre><code>Authorization: Bearer sk_test_51H8J...\n</code></pre> <p>Refer to the Authentication Reference for details on token scopes and expiry.</p>"},{"location":"guides/creating-a-charge/#endpoint-post-v1charges","title":"\ud83d\udce4 Endpoint: <code>POST /v1/charges</code>","text":""},{"location":"guides/creating-a-charge/#description","title":"Description","text":"<p>Creates a new payment charge against a customer's payment method.</p>"},{"location":"guides/creating-a-charge/#http-request","title":"HTTP Request","text":"<pre><code>POST /v1/charges\nContent-Type: application/x-www-form-urlencoded\nAuthorization: Bearer &lt;API_KEY&gt;\n</code></pre>"},{"location":"guides/creating-a-charge/#request-parameters","title":"Request Parameters","text":"Name Type Required Description <code>amount</code> integer Yes Charge amount in the smallest currency unit (e.g., cents for USD). <code>currency</code> string Yes ISO currency code (e.g., <code>usd</code>, <code>eur</code>). <code>source</code> string Yes A valid payment source (e.g., a test card token). <code>description</code> string No Optional charge description for internal use."},{"location":"guides/creating-a-charge/#example-request","title":"\ud83e\uddea Example Request","text":"<pre><code>curl https://api.stripe-mock.local/v1/charges \\\n  -u sk_test_51H8J...: \\\n  -d amount=2000 \\\n  -d currency=usd \\\n  -d source=tok_visa \\\n  -d description=\"Test charge for user onboarding\"\n</code></pre>"},{"location":"guides/creating-a-charge/#example-response","title":"\u2705 Example Response","text":"<pre><code>{\n  \"id\": \"ch_mock_1HX9sz2eZvKYlo2CxYqz\",\n  \"object\": \"charge\",\n  \"amount\": 2000,\n  \"currency\": \"usd\",\n  \"paid\": true,\n  \"status\": \"succeeded\",\n  \"created\": 1628709103,\n  \"description\": \"Test charge for user onboarding\",\n  \"source\": {\n    \"id\": \"tok_visa\",\n    \"object\": \"card\",\n    \"brand\": \"Visa\",\n    \"last4\": \"4242\",\n    \"exp_month\": 12,\n    \"exp_year\": 2025\n  }\n}\n</code></pre>"},{"location":"guides/creating-a-charge/#error-handling","title":"\u26a0\ufe0f Error Handling","text":"<p>Expect <code>4xx</code> responses for malformed requests or invalid tokens.</p> <ul> <li>400 Bad Request: Missing or invalid parameters</li> <li>401 Unauthorized: Invalid or missing API key</li> <li>402 Payment Required: Simulated card decline</li> </ul> <p>For full error semantics, refer to the Error Codes Reference.</p>"},{"location":"guides/creating-a-charge/#webhook-integration","title":"\ud83d\udce9 Webhook Integration","text":"<p>Upon successful charge creation, a <code>charge.succeeded</code> event will be dispatched if you have configured a webhook endpoint.</p> <pre><code>{\n  \"type\": \"charge.succeeded\",\n  \"data\": {\n    \"object\": { ...charge object... }\n  }\n}\n</code></pre> <p>See Handling Events for event formats and testing instructions.</p>"},{"location":"guides/creating-a-charge/#related-topics","title":"\ud83d\udcd8 Related Topics","text":"<ul> <li>Authentication</li> <li>Handling Events</li> <li>Error Codes</li> <li>OpenAPI Spec</li> </ul> <p>This mock charge flow is ideal for UI prototyping, webhook testing, and demonstrating end-to-end payment logic without actual transactions.</p>"},{"location":"reference/authentication/","title":"Authentication","text":"<p>All endpoints in the Stripe Mock API are secured via bearer token authentication. This ensures that only authorized clients can interact with the mock system, simulating real-world API security behavior.</p>"},{"location":"reference/authentication/#overview","title":"\ud83d\udd10 Overview","text":"<p>Authentication is handled through a static, simulated Secret API Key included in the <code>Authorization</code> header of each request.</p>"},{"location":"reference/authentication/#header-format","title":"Header Format","text":"<pre><code>Authorization: Bearer &lt;your_api_key&gt;\n</code></pre> <p>The API key should never be exposed in frontend code, just as in real production environments.</p>"},{"location":"reference/authentication/#obtaining-your-api-key","title":"\ud83d\udddd\ufe0f Obtaining Your API Key","text":"<p>In the mock environment, predefined API keys are used:</p> Environment Key Scope Test <code>sk_test_51H8JFAKE...</code> Full API access Invalid <code>sk_invalid_key</code> Triggers 401 <p>Use the test key for all documentation scenarios.</p>"},{"location":"reference/authentication/#sample-authenticated-request","title":"\ud83e\uddea Sample Authenticated Request","text":"<pre><code>curl https://api.stripe-mock.local/v1/customers \\\n  -H \"Authorization: Bearer sk_test_51H8JFAKE...\"\n</code></pre>"},{"location":"reference/authentication/#authentication-errors","title":"\u274c Authentication Errors","text":"<p>Incorrect or missing credentials will result in an HTTP <code>401 Unauthorized</code> response:</p> <pre><code>{\n  \"error\": {\n    \"type\": \"authentication_error\",\n    \"message\": \"Invalid API Key provided: sk_invalid_key\"\n  }\n}\n</code></pre> <p>Refer to the Error Codes for all possible authentication-related failures.</p>"},{"location":"reference/authentication/#token-rotation","title":"\ud83d\udd04 Token Rotation","text":"<p>Although tokens are static in this mock setup, production-grade APIs require token rotation and secrets management:</p> <ul> <li>Store API keys securely (e.g., in environment variables or secret managers).</li> <li>Never log or hard-code them.</li> <li>Rotate keys periodically.</li> </ul>"},{"location":"reference/authentication/#authentication-vs-authorization","title":"\ud83d\udee1\ufe0f Authentication vs Authorization","text":"<p>This mock API models authentication only. For real-world scenarios, authorization (e.g., permission scopes, roles) may apply based on the token's context.</p>"},{"location":"reference/authentication/#related-sections","title":"\ud83d\udcd8 Related Sections","text":"<ul> <li>Creating a Charge</li> <li>Handling Events</li> <li>Error Codes</li> <li>OpenAPI Spec</li> </ul> <p>Security Reminder</p> <p>The mock API uses static keys and does not simulate rate-limiting or fraud detection. For production-grade security practices, consult Stripe's real API docs.</p>"},{"location":"reference/errors/","title":"Error Codes","text":"<p>The Stripe Mock API follows a consistent, JSON-based error response format to help developers gracefully handle problems during integration. This section outlines the standard error structure, supported error types, and examples of failure responses.</p>"},{"location":"reference/errors/#error-object-structure","title":"\ud83e\udde9 Error Object Structure","text":"<p>All errors are returned with HTTP status codes and a top-level <code>error</code> object:</p> <pre><code>{\n  \"error\": {\n    \"type\": \"invalid_request_error\",\n    \"message\": \"Missing required parameter: amount\",\n    \"param\": \"amount\"\n  }\n}\n</code></pre>"},{"location":"reference/errors/#fields","title":"Fields","text":"Field Type Description <code>type</code> string Category of error (<code>api_error</code>, <code>card_error</code>, etc.) <code>message</code> string Human-readable explanation of the error <code>param</code> string Parameter causing the issue, if applicable"},{"location":"reference/errors/#error-types","title":"\ud83e\uddf1 Error Types","text":"Type HTTP Status Description <code>invalid_request_error</code> 400 Missing or malformed parameters <code>authentication_error</code> 401 Invalid or missing API key <code>permission_error</code> 403 Attempted access to forbidden resources <code>not_found_error</code> 404 Resource does not exist <code>rate_limit_error</code> 429 Too many requests in a short time <code>api_error</code> 500 Internal API error <code>card_error</code> 402 Failed card-related operations (mocked)"},{"location":"reference/errors/#sample-responses","title":"\ud83d\udd01 Sample Responses","text":""},{"location":"reference/errors/#missing-parameter","title":"Missing Parameter","text":"<pre><code>{\n  \"error\": {\n    \"type\": \"invalid_request_error\",\n    \"message\": \"Missing required parameter: currency\",\n    \"param\": \"currency\"\n  }\n}\n</code></pre>"},{"location":"reference/errors/#invalid-api-key","title":"Invalid API Key","text":"<pre><code>{\n  \"error\": {\n    \"type\": \"authentication_error\",\n    \"message\": \"Invalid API Key provided: sk_invalid_key\"\n  }\n}\n</code></pre>"},{"location":"reference/errors/#card-declined-mock-scenario","title":"Card Declined (Mock Scenario)","text":"<pre><code>{\n  \"error\": {\n    \"type\": \"card_error\",\n    \"message\": \"Your card was declined.\",\n    \"code\": \"card_declined\"\n  }\n}\n</code></pre>"},{"location":"reference/errors/#handling-strategies","title":"\ud83e\udde0 Handling Strategies","text":"<p>Graceful Degradation</p> <p>Always display user-friendly messages on client-side apps and log detailed errors server-side.</p> <p>Retry Logic</p> <p>Only retry for <code>api_error</code> or <code>rate_limit_error</code> types. Never retry authentication or validation failures.</p>"},{"location":"reference/errors/#see-also","title":"\ud83e\uddea See Also","text":"<ul> <li>Authentication</li> <li>Creating a Charge</li> <li>Handling Events</li> <li>OpenAPI Reference</li> </ul>"},{"location":"reference/errors/#developer-notes","title":"\ud83d\udee0\ufe0f Developer Notes","text":"<ul> <li>All error responses are deterministic and mockable.</li> <li>Use HTTP status codes programmatically; reserve the <code>message</code> field for debugging and UX copy.</li> </ul>"},{"location":"webhooks/handling-events/","title":"Handling Events","text":"<p>The Stripe Mock API supports webhook-like event simulations, allowing developers to test asynchronous flows such as payment confirmations, failures, and refunds. This guide explains how to subscribe to events and validate payloads.</p>"},{"location":"webhooks/handling-events/#what-are-events","title":"\ud83e\udde0 What Are Events?","text":"<p>Events are JSON objects that notify your application about state changes in the system. They are delivered to your configured webhook endpoint via HTTP POST requests.</p> <p>Typical use cases:</p> <ul> <li>Listening for <code>charge.succeeded</code> to trigger order fulfillment.</li> <li>Reacting to <code>charge.failed</code> to notify users of payment issues.</li> <li>Logging <code>customer.deleted</code> for data retention compliance.</li> </ul>"},{"location":"webhooks/handling-events/#configuring-a-webhook-endpoint","title":"\ud83d\udce1 Configuring a Webhook Endpoint","text":"<p>To receive events:</p> <ol> <li>Run a local server or public endpoint.</li> <li>Register it via the mock admin interface or by setting an environment variable.</li> <li>Handle incoming JSON POST payloads.</li> </ol> <pre><code>export MOCK_WEBHOOK_URL=http://localhost:3000/webhook\n</code></pre>"},{"location":"webhooks/handling-events/#event-structure","title":"\ud83d\udd14 Event Structure","text":"<p>Each event payload includes metadata and the full resource object that triggered it.</p> <pre><code>{\n  \"id\": \"evt_001\",\n  \"type\": \"charge.succeeded\",\n  \"created\": 1721505600,\n  \"data\": {\n    \"object\": {\n      \"id\": \"ch_001\",\n      \"amount\": 5000,\n      \"currency\": \"usd\",\n      \"status\": \"succeeded\"\n    }\n  }\n}\n</code></pre>"},{"location":"webhooks/handling-events/#fields","title":"Fields","text":"Field Type Description <code>id</code> string Unique ID for the event <code>type</code> string Event type (e.g. <code>charge.failed</code>) <code>created</code> integer UNIX timestamp of event creation <code>data</code> object Contains the resource that triggered the event"},{"location":"webhooks/handling-events/#supported-event-types","title":"\ud83c\udfaf Supported Event Types","text":"Event Name Trigger <code>charge.created</code> When a charge is initiated <code>charge.succeeded</code> When a charge is successfully completed <code>charge.failed</code> When a charge is declined <code>refund.created</code> When a refund is issued <code>customer.deleted</code> When a customer object is deleted"},{"location":"webhooks/handling-events/#verifying-event-signatures","title":"\ud83d\udd12 Verifying Event Signatures","text":"<p>To ensure the event was sent by the Stripe Mock API:</p> <ol> <li>Each event includes a <code>Mock-Signature</code> header.</li> <li>Compute HMAC-SHA256 using your webhook secret.</li> <li>Compare the computed hash to the one in the header.</li> </ol> <pre><code>import hmac\nimport hashlib\n\npayload = request.body\nsecret = b'secret123'\nsignature = request.headers['Mock-Signature']\n\ncomputed = hmac.new(secret, payload, hashlib.sha256).hexdigest()\nassert computed == signature\n</code></pre>"},{"location":"webhooks/handling-events/#retry-logic","title":"\ud83d\udd01 Retry Logic","text":"<p>The Stripe Mock API simulates real-world reliability behavior:</p> <ul> <li>If your endpoint returns a non-2xx status code, the event will be retried up to 3 times with exponential backoff.</li> <li>Events are delivered in the order they occur, but delivery is not guaranteed to be strictly sequential under failure conditions.</li> </ul>"},{"location":"webhooks/handling-events/#example-listening-to-chargesucceeded","title":"\ud83e\uddea Example: Listening to <code>charge.succeeded</code>","text":"<pre><code>app.post('/webhook', express.json(), (req, res) =&gt; {\n  const event = req.body;\n\n  if (event.type === 'charge.succeeded') {\n    const charge = event.data.object;\n    fulfillOrder(charge);\n  }\n\n  res.status(200).send();\n});\n</code></pre>"},{"location":"webhooks/handling-events/#related-docs","title":"\ud83d\udd17 Related Docs","text":"<ul> <li>Creating a Charge</li> <li>Errors</li> <li>Authentication</li> <li>OpenAPI Spec</li> </ul>"},{"location":"webhooks/handling-events/#notes","title":"\ud83d\udccc Notes","text":"<ul> <li>For webhook testing, tools like ngrok or Webhook.site are recommended.</li> <li>Payloads conform to Stripe\u2019s canonical structure, enabling easy migration to real Stripe APIs.</li> </ul>"}]}